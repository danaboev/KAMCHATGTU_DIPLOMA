#include <iostream>
#include <conio.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctime>
#include <windows.h>
#include <chrono>
#include <string>
#include <algorithm>
using namespace std;


int* pre_kmp(string pattern)
{
	int size = pattern.size();
	int* pie = new int[size];
	pie[0] = 0;
	int k = 0;
	for (int i = 1;i < size;i++)
	{
		while (k > 0 && pattern[k] != pattern[i])
		{
			k = pie[k - 1];
		}
		if (pattern[k] == pattern[i])
		{
			k = k + 1;
		}
		pie[i] = k;
	}

	return pie;
}

void kmp(string text, string pattern)
{
	int* pie = pre_kmp(pattern);
	int matched_pos = 0;
	for (int current = 0; current < text.length(); current++)
	{
		while (matched_pos > 0 && pattern[matched_pos] != text[current])
			matched_pos = pie[matched_pos - 1];

		if (pattern[matched_pos] == text[current])
			matched_pos = matched_pos + 1;

		if (matched_pos == (pattern.length()))
		{
			cout << "Pattern found at index  " << current - (pattern.length() - 1) << "\n\n";
			matched_pos = pie[matched_pos - 1];
		}
	}
}
int main()
{
	string text = "abcabaabcabca";
	string pattern;
	int k = 0;
	cout << "Enter Pattern to Search at <abcabaabcabca:>  ";
	cin >> pattern;
	auto start = chrono::steady_clock::now();
	kmp(text, pattern);
	k++;
	auto stop = chrono::steady_clock::now();
	auto ns = chrono::duration_cast<chrono::nanoseconds>(stop - start);
	cout << "runtime  = " << ns.count() << " nanosec" << endl;
	if (k == 0)
		cout << "\nError:No Match Found! \n";

	else
		cout << "\nTotal Instances Found = " << k << "\n";
	return 0;
}
