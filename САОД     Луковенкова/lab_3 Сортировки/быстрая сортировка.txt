/// быстрая
void quicksort(int *l , int* r){

auto start = chrono::steady_clock::now();

    if (r - l <= 1) return;
    int z = *(l + (r - l) / 2);

    int* ll = l, * rr = r - 1;
    while (ll <= rr)
    {
        while (*ll < z) ll++;
        while (*ll > z) rr--;
        if (ll <= rr) {
            swap(*ll, *rr);
            ll++;
            rr--;
        }
        }

    if (l < rr) quicksort(l, rr + 1);
    if (ll < r) quicksort(ll, r);

      auto stop = chrono::steady_clock::now();
      auto ns = chrono::duration_cast<chrono::nanoseconds>(stop - start);
      cout << "runtime  = " << ns.count() << " nanosec" << endl;

}
int main()
{
    cout << "Before sort:\n";
    for (int i = 0; i < n; ++i)
         A[i] = i+1;
    random_shuffle(A, A + n);
    for (int i = 0; i < n; ++i)
        cout << A[i] << "  ";
    cout << endl;

    cout << "Quick Sort:\n";
    quicksort(A, A + n);

    for (int i = 0; i < n; ++i)
        cout << A[i] << "  ";
    cout << endl;
    _getch();
   
}